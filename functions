test -x "${UMOCI:=$(command -v umoci)}" || return
test -x "${RUNC:=$(command -v runc)}" || return

### cleanup functions

u_cleanup () {
	# use ???? to not accidentally delete other files
	rm -rf ${BUILDDIR:-.}/image.????
	rm -rf ${BUILDDIR:-.}/bundle.????
}

u_set_autoclean () {
	trap u_cleanup EXIT
}

### images

u_create_image () {
	local path
	path=$(mktemp -udp "${BUILDDIR:-.}" image.XXXX)
	${UMOCI} init --layout "$path"
	echo "$path"
}

u_set_image_name () {
	local newpath
	newpath="$(dirname "${1:?}")/${2:?}"
	mv -T "${1}" "$newpath"
	echo "$newpath"
}

u_clean_image () {
	${UMOCI} gc --layout "${1:?}"
}

### image refs

u_gen_tagname () {
	mktemp -u "${1:+$1:}XXXX"
}

u_create_ref () {
	local ref
	ref=$(u_gen_tagname "${1:?}")
	${UMOCI} new --image "$ref"
	echo "$ref"
}

u_save_ref () {
	${UMOCI} tag --image "${1:?}" "${2:?}"
}

u_close_ref () {
	${UMOCI} rm --image "${1:?}"
}

### image ref layers

u_open_layer () {
	local img bundle
	img="${1:?}"
	shift
	bundle=$(mktemp -udp "${BUILDDIR:-.}" bundle.XXXX)
	${UMOCI} unpack --image "$img" "$bundle" "$@"
	echo "$bundle"
}

u_continue_layer () {
	local img bundle
	img="${2:?}"
	bundle="${1:?}"
	shift 2
	${UMOCI} repack --refresh-bundle --image "$img" "$bundle" "$@"
}

u_close_layer () {
	local img bundle
	img="${2:?}"
	bundle="${1:?}"
	shift 2
	${UMOCI} repack --image "$img" "$bundle" "$@"
	rm -rf "$bundle"
}

### image ref config

u_config () {
	local img
	img="${1:?}"
	shift
	${UMOCI} config --image "$img" "$@"
}

### layer utilities

u_layer_path () {
	local bundle="${1:?}" path="${2:?}"
	# make sure the path has a single leading slash and no trailing slashes
	path="$(echo -n "/${path}" | sed 's#^\s*/*\(/\([^/]\(.*[^/]\)\?\)\?\)/\?\s*$#\1#')"
	echo "${bundle}/rootfs${path}"
}

### file handling

u_get_asset () {
	local uri scheme path fname cdir
	uri="${1:?}"
	scheme="${uri%:*}"
	case "$scheme" in
		http|https)
			fname=$(_u_uri_as_fname "$uri")
			cdir="${ASSET_CACHEDIR:-${BUILDDIR:-.}/.assetcache}"
			path="$cdir/$fname"
			if [ ! -f "$path" ]; then
				[ -d "$cdir" ] || mkdir -p "$cdir"
				wget -nv --show-progress -O "$path" "$uri"
				if [ $? -ne 0 ]; then
					rm -f "$path"
					return 1
				fi
			fi
			;;
		file|"")
			path="${uri#file://}"
			;;
		*)
			echo "Unknown scheme '$scheme' in URI '$uri'" >&2
			return 1
			;;
	esac
	[ -f "$path" ] || return 1
	echo "$path"
}

u_extract () {
	local archive="${1:?}" target="${2:?}"
	local apath
	apath="$(u_get_asset "$archive")"
	mkdir -p "$target"
	if [ "$(echo -n "${archive##*.}" | tr "[:upper:]" "[:lower:]")" = "zip" ]; then
		# handle zip
		unzip -qq "$apath" -d "$target"
	else
		# assume file is a tar
		tar -xf "$apath" -C "$target"
	fi
}

### internal

_u_uri_as_fname () {
	local uri fname hash
	uri="${1:?}"
	fname="$(echo -n "$uri" | tr -cs "[:alnum:]" "_" | sed 's/^_*//; s/_*$//')"
	hash="$(echo -n "$uri" | md5sum | cut -c -8)"
	echo "${fname#}-${hash}"
}